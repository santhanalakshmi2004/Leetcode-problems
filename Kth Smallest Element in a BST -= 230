230. Kth Smallest Element in a BST

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
Constraints:
The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104

Solution:

class Solution {
    private int k;private int ans; 
    public int kthSmallest(TreeNode root, int k) {
        // PriorityQueue<Integer>minHeap=new PriorityQueue<>();
        this.k=k;
        // helper(root,minHeap,k);
        helper(root);
        // int ans=0;
        // for(int i=0;i<k;i++){
        //     ans=minHeap.poll();
        // }
        return ans;
    }
    // private void helper(TreeNode root,PriorityQueue<Integer>minHeap,int k){
    private void helper(TreeNode root){
        if(root==null){
            return;
        }
        // helper(root.left,minHeap,k);
        helper(root.left);
        // minHeap.offer(root.val);
        k--;
        if(k==0){
            ans=root.val;
            return;
        }
        // helper(root.right,minHeap,k);
        helper(root.right);
    }
}
